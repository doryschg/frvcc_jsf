package bo.gob.sin.sre.fac.frvcc.jsf.ventas.controller;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Base64;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;

import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.UploadedFile;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;

import bo.gob.sin.sen.enco.model.ContextoJSF;
import bo.gob.sin.sre.fac.frvcc.jsf.ventas.model.VentaDto;
import bo.gob.sin.sre.fac.frvcc.jsf.ventas.service.EstandarService;
import bo.gob.sin.str.util.compresion.CompresorZip;

@Named
@SessionScoped
public class NotasController implements Serializable {
	
	private static final long serialVersionUID = 1L;
	
	// TODO DATA 
	private static String PLANTILLA_EXCEL = "";
		
		
		// TODO INSTANCIA LOCAL
	DefaultStreamedContent file;
	private Resource srcfile;
	private List<VentaDto> notas;
	long ifc;
	long nit;
	

    @Inject
    private EstandarService service;
	
	
	public NotasController() {
		
	}
	
	@PostConstruct
    public void init() {
					 
    }
	
	private void getContext() {
		ContextoJSF contexto = new ContextoJSF();
		ifc = contexto.getUsuario().getPersonaId();
		nit = Long.parseLong(contexto.getUsuario().getNit());
	}
	
	public void removerNota(VentaDto nota) {
		
	}
	
	

//  TODO descarga de archivo 
	public void dwnldNotaExcel() throws IOException {
		try {
			byte[] vArchivoDecodificado = Base64.getDecoder().decode(PLANTILLA_EXCEL.getBytes());
			InputStream vArchivoXlsStream = new ByteArrayInputStream(vArchivoDecodificado);
			setFile(new DefaultStreamedContent(vArchivoXlsStream,"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;","PlantillaRegistroNotas" + ".xlsx"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	//  TODO LEER ARCHIVO
	public void getFileData(FileUploadEvent event) {
		
		try {
			UploadedFile upldFile = event.getFile();
			srcfile = getUserFileResource(upldFile);
			//byte[] vArchivo =comprimirArchivo(file);
			System.out.println("Archivos size "+upldFile.getSize() +""+upldFile.getFileName());
			
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	//  TODO CONVIERTE ARCHIVO A ZIP 	
	public static Resource getUserFileResource(UploadedFile pFile) throws IOException {
		String vFilename = pFile.getFileName().replace(".xlsx", "");
		Path tempFile = Files.createTempFile(vFilename, ".zip");

		Files.write(tempFile,CompresorZip.zipBytes(pFile.getFileName(), pFile.getContents()));
		System.out.println("uploading: " + tempFile);
		File file = tempFile.toFile();
		return new FileSystemResource(file);
	}
	
	
	// -------------------------- GETTERS AND SETTERS ------------------------------
	
	public DefaultStreamedContent getFile() {
        return file;
    }
	
	public void setFile(DefaultStreamedContent file) {
		this.file = file;
	}

	public List<VentaDto> getNotas() {
		return notas;
	}

	public void setNotas(List<VentaDto> notas) {
		this.notas = notas;
	}
	

}
